From 4d3f5fe76aa357a7e7df7cd534f47b160e04e002 Mon Sep 17 00:00:00 2001
From: Jonas Spinner <jonas.spinner@student.kit.edu>
Date: Tue, 28 Jan 2020 16:23:40 +0100
Subject: [PATCH 2/2] Modified default weight assignment

---
 src/ArgPack.cpp |  2 +-
 src/ArgPack.h   |  2 +-
 src/Graph.cpp   | 13 ++++++++++++-
 src/Graph.h     |  8 +++++++-
 src/main.cpp    |  2 +-
 5 files changed, 22 insertions(+), 5 deletions(-)

diff --git a/src/ArgPack.cpp b/src/ArgPack.cpp
index ddcae1f..6851b5e 100644
--- a/src/ArgPack.cpp
+++ b/src/ArgPack.cpp
@@ -22,7 +22,7 @@ namespace ils_mwis
 
 ArgPack *ArgPack::def_ap_ = 0;
 
-ArgPack::ArgPack(int argc, char * const argv []) :
+ArgPack::ArgPack(int argc, const char * const argv []) :
 	verbose(true),
 	rand_seed(1),
 	target(0),
diff --git a/src/ArgPack.h b/src/ArgPack.h
index 45e56d5..96b1ba7 100644
--- a/src/ArgPack.h
+++ b/src/ArgPack.h
@@ -44,7 +44,7 @@ public:
 
 //	static ArgPack &write_ap() { assert(def_ap_); return *def_ap_; }
 
-	ArgPack(int argc, char * const argv []);
+	ArgPack(int argc, const char * const argv []);
 
 	~ArgPack() { assert(def_ap_); def_ap_ = 0; }
 
diff --git a/src/Graph.cpp b/src/Graph.cpp
index abe47e6..e17353f 100644
--- a/src/Graph.cpp
+++ b/src/Graph.cpp
@@ -9,7 +9,7 @@ using namespace std;
 namespace ils_mwis
 {
 
-Graph::Graph(const int n, const int m) :
+Graph::Graph(const int n, const int m, WeightsFromIndex) :
 	weights_(n, 0),
 	n_(n),
 	m_(m),
@@ -20,6 +20,17 @@ Graph::Graph(const int n, const int m) :
 	}
 }
 
+Graph::Graph(const int n, const int m) :
+        weights_(n, 0),
+        n_(n),
+        m_(m),
+        adj_l_(n, std::vector<int>())
+{
+    for(int idx = 0; idx < n; idx++) {
+        weights_[idx] = (idx + 1) % 200 + 1;
+    }
+}
+
 void Graph::removeEdge(const int i, const int j)
 {
 	assert(i < n_ && j < n_);
diff --git a/src/Graph.h b/src/Graph.h
index 268dc20..baff46d 100644
--- a/src/Graph.h
+++ b/src/Graph.h
@@ -33,6 +33,8 @@ public:
 
 	int weight(const int v) const { return weights_[v]; }
 
+    int &weight(const int v) { return weights_[v]; }
+
 	// return the adjency list of vertex i
 
 	const std::vector<int>& adj_l(const int i) const
@@ -42,7 +44,11 @@ public:
 		return adj_l_[i];
 	}
 
-	Graph(const int n, const int m);
+    struct WeightsFromIndex {};
+
+    Graph(const int n, const int m, WeightsFromIndex);
+
+    Graph(const int n, const int m);
 
 	void addEdge(const int i, const int j);
 
diff --git a/src/main.cpp b/src/main.cpp
index d61e4af..e3743b0 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -64,7 +64,7 @@ Graph *readInstance (const string &filename, bool complement)
 				                ". The number of edges and vertices must not be negative.\n");
 			}
 			m = v2;
-			graph = new Graph(v1, v2);
+			graph = new Graph(v1, v2, Graph::WeightsFromIndex());
 			if (complement) {
 				for (int idx1 = 0; idx1 < v1; idx1++) {
 					for (int idx2 = idx1 + 1; idx2 < v1; idx2++) {
-- 
2.20.1

